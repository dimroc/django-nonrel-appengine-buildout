[buildout]
parts =
        django
        flatten-eggs

# Note that we use django-nonrel source for Django egg
eggs =
        Django 
        djangotoolbox
        django-dbindexer
        djangoappengine
	    django-piston
	    django-mediagenerator
        dimini.boilerplate

extensions =
        mr.developer

find-links =

# [sources] which will be checked out when buildout is run
auto-checkout = *

# Location of App engine yaml files, static and media folders
# This option is a template variable we use in [django]Â section to set the defaukt
# location of various files.
appengine-base-path = ${buildout:directory}/src/dimini.boilerplate/dimini/boilerplate

# Define version control repositories where to fetch the evil stuff.
# All these should be distributed as Python eggs.
# You can extend this section and add your own version control repositories.
# We need to wrap some django-nonrel packages as nested directories, because they are not using standadr Python package layout
# and Python/Django cannot figure out these packages otherwise. See
# extra-paths below.
[sources]
Django = hg https://bitbucket.org/wkornewald/django-nonrel
djangotoolbox = hg https://bitbucket.org/wkornewald/djangotoolbox
django-dbindexer = hg https://bitbucket.org/wkornewald/django-dbindexer
djangoappengine = hg https://bitbucket.org/dimroc/djangoappengine-buildout
django-testapp = hg https://bitbucket.org/wkornewald/django-testapp egg=false
django-piston = hg https://bitbucket.org/dimroc/django-piston
django-mediagenerator = hg https://bitbucket.org/wkornewald/django-mediagenerator
djc.recipe = git git://gitorious.org/~dimroc/djc-recipe/dimrocs-djc-recipe.git
dimini.boilerplate = git git://github.com/dimroc/django-nonrel-appengine-sample.git

# Use djc.recipe to set-up django-admin wrapper
# For options see http://pypi.python.org/pypi/djc.recipe
[django]
recipe = djc.recipe
project = dimini.boilerplate

# This is needed in order to bootstrap djangoappengine (djangoappengine.boot module reads)
environment-vars =
        GOOGLE_APPENGINE_PROJECT_ROOT ${buildout:appengine-base-path}

static-directory = ${buildout:appengine-base-path}/static
media-directory = ${buildout:appengine-base-path}/media

settings-template = ${buildout:appengine-base-path}/settings.py

# Django recipe does not resped buildout eggs configuration, so we need to manually list packages 
# which are order to needed to bootstrap Django (included in settings.py and such)
extra-paths = 
    ${buildout:directory}/src/djangoappengine
    
# Google App Engine does not support Python egg packaging.
# We need to mangle all eggs into flat directory structure to make App Engine
# application runnable or deployable.
# We do this using "omelette" http://pypi.python.org/pypi/collective.recipe.omelette
# This will map all buildout eggs to the directory structure under your 
# App Engine project
[flatten-eggs]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}
location = ${buildout:appengine-base-path}/flattened-eggs

# Do not include your own package in symlinks and setuptools helper files.
# Do not copy easy_install and such helper scripts.
# Workaround bad packaging of djangoappengine.
ignores =
        dimini.boilerplate
        setuptools
        distribute
  


